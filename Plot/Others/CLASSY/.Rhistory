############################################################################
### Import files
## Import data
data <- read.csv("OsCLSY3_GC.csv", header = T)
colnames (data) <- c("Gene","Position","GC_rate")
## Data processing
data <- data %>%
mutate (GC_rate = GC_rate * 100) %>%
arrange(Position)
p <- data %>%
ggplot(aes(x=Position, y = GC_rate)) +
geom_line(linewidth = .2, color = "#de425b")+
theme_classic()+
labs(x = "Nucleotide number", y = "GC rate(%)") +
theme(axis.line = element_line(color="black", linewidth = .3),
axis.text = element_text(color="black", size = 5),
axis.title = element_text(color="black", size = 6),
axis.ticks = element_line(color="black", linewidth = .3),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none"
)+
scale_x_continuous(breaks = c(0,1000,2000,3000,4000), expand = c(0,100))+
scale_y_continuous(breaks = c(30,50,70,90), expand = c(0, 1))
############################################################################
### Import libraries
library (ggplot2)
library (tidyverse)
library (ggthemes)
library (ggpubr)
library (cowplot)
############################################################################
### Import files
## Import data
data <- read.csv("OsCLSY3_GC.csv", header = T)
colnames (data) <- c("Gene","Position","GC_rate")
## Data processing
data <- data %>%
mutate (GC_rate = GC_rate * 100) %>%
arrange(Position)
p <- data %>%
ggplot(aes(x=Position, y = GC_rate)) +
geom_line(linewidth = .2, color = "#de425b")+
theme_classic()+
labs(x = "Nucleotide number", y = "GC rate(%)") +
theme(axis.line = element_line(color="black", linewidth = .3),
axis.text = element_text(color="black", size = 5),
axis.title = element_text(color="black", size = 6),
axis.ticks = element_line(color="black", linewidth = .3),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none"
)+
scale_x_continuous(breaks = c(0,1000,2000,3000,4000), expand = c(0,100))+
scale_y_continuous(breaks = c(30,50,70,90), expand = c(0, 1))
pdf(file = "plot_GC.pdf", width = 3, height = 1)
print(p)
dev.off()
############################################################################
### Import libraries
library (ggplot2)
library (tidyverse)
library (ggthemes)
library (ggpubr)
library (cowplot)
############################################################################
### Import files
#Import data
data <- read.csv("confidence.csv", header = T)
colnames (data) <- c("Chain","Res_Number","Res_name","pLDDT")
# Data processing
data <- data %>%
group_by(Chain, Res_Number, Res_name) %>%
summarize(avg_pLDDT = mean(pLDDT)) %>%
ungroup() %>%
arrange(Res_Number)
############################################################################
### Lineplot
p <- data %>%
ggplot(aes(x=Res_Number, y = avg_pLDDT)) +
geom_vline(xintercept = 870,linetype="dashed", linewidth = .2, color = "#666666")+
geom_line(linewidth = .2, color = "#488f31")+
theme_classic()+
labs(x = "Residue number", y = "pLDDT") +
theme(axis.line = element_line(color="black", linewidth = .3),
axis.text = element_text(color="black", size = 5),
axis.title = element_text(color="black", size = 6),
axis.ticks = element_line(color="black", linewidth = .3),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none"
)+
scale_x_continuous(breaks = c(0,400,800,1200))+
scale_y_continuous(expand = c(0, 1))
pdf(file = "plot_pLDDT.pdf", width = 3, height = 1)
print(p)
dev.off()
############################################################################
### Import libraries
library (ggplot2)
library (dplyr)
library (reshape2)
library (pheatmap)
library (vegan)
library (scales)
############################################################################
### Import files
# Import data
data_FG <- read.csv("FG_OsCLSY3.csv", header = TRUE)
############################################################################
### Import files
# Import data
data_FG <- read.csv("FG_OsCLSY.csv", header = TRUE)
data_Evo <- read.csv("EvoRepro_OsCLSY.csv", header = TRUE)
View(data_FG)
############################################################################
### Import files
# Import data
data_FG <- read.csv("FG_OsCLSY.csv", header = TRUE)
data_Evo <- read.csv("EvoRepro_OsCLSY.csv", header = TRUE)
############################################################################
# Process data
data_FG <- data_FG %>%
mutate (FG1 = rowMeans(data_FG[,c("FG1.1","FG1.2","FG1.3")]),
FG2 = rowMeans(data_FG[,c("FG2.1","FG2.2","FG2.3")]),
FG3 = rowMeans(data_FG[,c("FG3.1","FG3.2","FG3.3")]),
FG4 = rowMeans(data_FG[,c("FG4.1","FG4.2","FG4.3")]),
FG5 = rowMeans(data_FG[,c("FG5.1","FG5.2","FG5.3")]),
FG6 = rowMeans(data_FG[,c("FG6.1","FG6.2","FG6.3")]),
FL  = rowMeans(data_FG[,c("FL.1", "FL.2", "FL.3")])) %>%
select (Genename,FG1,FG2,FG3,FG4,FG5,FG6,FL)
############################################################################
# Process data
data_FG <- data_FG %>%
mutate (FG1 = rowMeans(data_FG[,c("FG1.1","FG1.2","FG1.3")]),
FG2 = rowMeans(data_FG[,c("FG2.1","FG2.2","FG2.3")]),
FG3 = rowMeans(data_FG[,c("FG3.1","FG3.2","FG3.3")]),
FG4 = rowMeans(data_FG[,c("FG4.1","FG4.2","FG4.3")]),
FG5 = rowMeans(data_FG[,c("FG5.1","FG5.2","FG5.3")]),
FG6 = rowMeans(data_FG[,c("FG6.1","FG6.2","FG6.3")]),
FL  = rowMeans(data_FG[,c("FL.1", "FL.2", "FL.3")])) %>%
select (Gene,FG1,FG2,FG3,FG4,FG5,FG6,FL)
sample_FG = colnames(data_FG[,-1])
sample_Evo = colnames(data_Evo[,-1])
data <- left_join(data_FG, data_Evo, by = join_by(Gene))
data$Blank = NA
data <- data %>%
melt(id.vars = "Genename",
variable.name = "Sample", value.name = "TPM")
data <- data %>%
melt(id.vars = "Gene",
variable.name = "Sample", value.name = "TPM")
data$Gene = factor(data$Gene,
levels = rev(unique(data$Gene)))
data$Sample = factor(data$Sample,
levels = c(sample_FG, "Blank", sample_Evo))
data <- data %>%
mutate (log10TPM = log10(1+TPM)) %>%
mutate (TPM = ifelse(TPM >= 100, round(TPM,1), round(TPM,2)))
high_col <- "#A42B2A"
mid_col <- "#F3F4CC"
low_col <- "#29328A"
p <- data %>%
ggplot(aes(y = Genename, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_text(aes(label = TPM), size = 1) +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 36.5),
color = "black", fill = NA, linewidth = 0.1)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 36.5),
color = "black", fill = NA, linewidth = 0.1)+
scale_fill_gradient2(limits = c(0, 2.5),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
scale_x_discrete(labels = function(x) ifelse(x == "Blank", "", x))+
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("Expression.pdf", width = 3, height = 5)
p
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_text(aes(label = TPM), size = 1) +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 36.5),
color = "black", fill = NA, linewidth = 0.1)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 36.5),
color = "black", fill = NA, linewidth = 0.1)+
scale_fill_gradient2(limits = c(0, 2.5),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
scale_x_discrete(labels = function(x) ifelse(x == "Blank", "", x))+
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("Expression.pdf", width = 3, height = 5)
p
dev.off()
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_text(aes(label = TPM), size = 1) +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
scale_fill_gradient2(limits = c(0, 2.5),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
scale_x_discrete(labels = function(x) ifelse(x == "Blank", "", x))+
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("Expression.pdf", width = 3, height = 5)
p
dev.off()
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
scale_fill_gradient2(limits = c(0, 2.5),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
scale_x_discrete(labels = function(x) ifelse(x == "Blank", "", x))+
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("Expression.pdf", width = 3, height = 1.2)
p
dev.off()
high_col <- "#A42B2A"
mid_col <- "#F3F4CC"
low_col <- NA
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
scale_fill_gradient2(limits = c(0, 1.2),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
scale_x_discrete(labels = function(x) ifelse(x == "Blank", "", x))+
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("Expression.pdf", width = 3, height = 1.2)
p
dev.off()
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
scale_fill_gradient2(limits = c(0, 1.2),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("expression_OsCLSY.pdf", width = 3, height = 1.2)
p
dev.off()
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.1)+
scale_fill_gradient2(limits = c(0, 1.2), breaks = c(0.0, 0.6, 1.2),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("expression_OsCLSY.pdf", width = 3, height = 1.2)
p
dev.off()
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.2)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.2)+
scale_fill_gradient2(limits = c(0, 1.2), breaks = c(0.0, 0.6, 1.2),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("expression_OsCLSY.pdf", width = 3, height = 1.2)
p
dev.off()
############################################################################
### Import libraries
library (ggplot2)
library (dplyr)
library (reshape2)
library (pheatmap)
library (vegan)
library (scales)
############################################################################
### Import files
# Import data
data_FG <- read.csv("FG_OsCLSY.csv", header = TRUE)
data_Evo <- read.csv("EvoRepro_OsCLSY.csv", header = TRUE)
############################################################################
# Process data
data_FG <- data_FG %>%
mutate (FG1 = rowMeans(data_FG[,c("FG1.1","FG1.2","FG1.3")]),
FG2 = rowMeans(data_FG[,c("FG2.1","FG2.2","FG2.3")]),
FG3 = rowMeans(data_FG[,c("FG3.1","FG3.2","FG3.3")]),
FG4 = rowMeans(data_FG[,c("FG4.1","FG4.2","FG4.3")]),
FG5 = rowMeans(data_FG[,c("FG5.1","FG5.2","FG5.3")]),
FG6 = rowMeans(data_FG[,c("FG6.1","FG6.2","FG6.3")]),
FL  = rowMeans(data_FG[,c("FL.1", "FL.2", "FL.3")])) %>%
select (Gene,FG1,FG2,FG3,FG4,FG5,FG6,FL)
sample_FG = colnames(data_FG[,-1])
sample_Evo = colnames(data_Evo[,-1])
data <- left_join(data_FG, data_Evo, by = join_by(Gene))
data$Blank = NA
data <- data %>%
melt(id.vars = "Gene",
variable.name = "Sample", value.name = "TPM")
data$Gene = factor(data$Gene,
levels = rev(unique(data$Gene)))
data$Sample = factor(data$Sample,
levels = c(sample_FG, "Blank", sample_Evo))
data <- data %>%
mutate (log10TPM = log10(1+TPM))
high_col <- "#A42B2A"
mid_col <- "#F3F4CC"
low_col <- NA
############################################################################
#ALL
p <- data %>%
ggplot(aes(y = Gene, x = Sample, fill = log10TPM)) +
geom_tile() +
geom_rect(aes(xmin = 0.5, xmax = 7.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.2)+
geom_rect(aes(xmin = 8.5, xmax = 21.5, ymin = 0.5, ymax = 3.5),
color = "black", fill = NA, linewidth = 0.2)+
scale_fill_gradient2(limits = c(0, 1.2), breaks = c(0.0, 0.6, 1.2),
low = low_col, high = high_col, mid = mid_col, oob=squish, na.value = NA) +
scale_x_discrete(labels = function(x) ifelse(x == "Blank", "", x))+
theme_void() +
labs(title = "", x = "", y = "", fill = "log10(1+TPM)") +
theme(axis.text.x = element_text(size = 6, color = "black", angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 6, color = "black", hjust = 1),
legend.title = element_text(size = 6, color = "black"),
legend.text = element_text(size = 5, color = "black"),
legend.key.size = unit(2.5,'mm'),
legend.position = "top")
pdf ("expression_OsCLSY.pdf", width = 3, height = 1.2)
p
dev.off()
