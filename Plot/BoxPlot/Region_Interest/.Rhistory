############################################################################
### Import libraries
library (ggplot2)
library (tidyverse)
library (ggthemes)
library (ggpubr)
library (cowplot)
library (rstatix)
library (forcats)
############################################################################
### Import files
# Import all csv file in the directory
lst_file    <- list.files (path = "./FG-dDMR_FG-siren", pattern = ".txt")
Sample_desc <- read.csv ("Sample_Description_FG-dDMR_FG-siren.csv")
############################################################################
### Pre-process files
#Import data
rownames(Sample_desc) <- Sample_desc[,1]
data <- data.frame (matrix(ncol = 9, nrow = 0))
#Merge data
for (i in lst_file){
temp_data <- read.table(paste(direc,i,sep=""))
temp_data["V8"]  <- Sample_desc[i,"Sample"]
temp_data["V9"]  <- Sample_desc[i,"Region"]
data <- rbind(data, temp_data)
}
temp_data <- read.table(paste("./FG-dDMR_FG-siren",i,sep=""))
#Merge data
for (i in lst_file){
temp_data <- read.table(paste("./FG-dDMR_FG-siren",i,sep=""))
temp_data["V8"]  <- Sample_desc[i,"Sample"]
temp_data["V9"]  <- Sample_desc[i,"Region"]
data <- rbind(data, temp_data)
}
#Merge data
for (i in lst_file){
temp_data <- read.table(paste("./FG-dDMR_FG-siren/",i,sep=""))
temp_data["V8"]  <- Sample_desc[i,"Sample"]
temp_data["V9"]  <- Sample_desc[i,"Region"]
data <- rbind(data, temp_data)
}
colnames (data) <- c("chr","start","end","mC","C","mC_rate","Context","Sample","regionType")
data <- data %>%
filter(Sample != "FG1-2_S2") %>%
mutate(Sample = case_when(Sample %in% c("FG1-1_S1")         ~ "FG1",
Sample %in% c("FG2-1_S3","FG2-2_S4") ~ "FG2",
Sample %in% c("FG3-1_S5","FG3-2_S6") ~ "FG3",
Sample %in% c("FG4-1_S7","FG4-2_S8") ~ "FG4",
Sample %in% c("FG5-1_S9","FG5-2_S10") ~ "FG5",
Sample %in% c("FG6-1_S11","FG6-2_S12") ~ "FG6",
Sample %in% c("FL-1_S13","FL-2_S14")   ~ "FL",
TRUE ~ Sample
)) %>%
select(chr, start, end, mC, C, Context, Sample, regionType) %>%
group_by(chr, start, end, Context, Sample, regionType) %>%
summarise(mC = sum(mC), C = sum(C)) %>%
filter (mC+C >= 20) %>% #20 reads minimum
mutate (mC_rate = mC/(mC+C)*100) %>%
select(chr, start, end, mC, C, mC_rate, Context, Sample, regionType)
data$Sample <- factor(data$Sample,
levels = c("FG1","FG2","FG3","FG4","FG5","FG6","FL"))
data$Context <- factor(data$Context,
levels = c("CG","CHG","CHH"))
data$regionType <- factor(data$regionType,
levels = c("DMR_siren","DMR","siren","shuffle"))
#Filtering NA values
data <- na.omit(data)
#Export as csv
for (context in c("CG","CHG","CHH")){
data_export <- data %>%
filter(Context == context)
write.csv (data_export, paste0("data_",context,".csv"))
}
rm (data_export)
fill_pal <- c("#f17272", "#f8c578", "#d1e47b", "#aad9bf",
"#6b89d7", "#ae88c8", "#666666")
#CG
p_CG <- data %>%
filter(Context == "CG") %>%
ggplot(aes(x = Sample, y = mC_rate, fill = Sample))+
stat_boxplot(geom="errorbar", color="black", linewidth = 0.2)+
geom_boxplot(outliers = FALSE, color="black", linewidth = 0.2)+
theme_classic()+
scale_fill_manual(values = fill_pal)+
facet_grid(regionType~.) +
coord_cartesian(clip = 'off') +
labs(y = "%Methylation", title = "CG") +
theme(axis.line = element_line(color="black", linewidth = 0.2),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size = 6),
axis.text.y = element_text(color="black", size = 5),
axis.text.x = element_text(color="black", size = 5,
angle = 90, vjust = 0.5),
axis.ticks.y = element_line(color="black", linewidth = 0.2),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
strip.background = element_blank(),
strip.text = element_text(color="black", size = 5),
plot.title = element_blank(),
)+
scale_y_continuous(expand = c(0, 1))
pdf(file = "./boxplot_CG.pdf", width = 1.4, height = 2.2)
print(p_CG)
dev.off()
############################################################################
### Import libraries
library (ggplot2)
library (tidyverse)
library (dplyr)
library (FSA)
library (multcompView)
library (ggpubr)
############################################################################
### Import files
# Import all csv file in the directory
lst_file    <- list.files (path = "./tissue", pattern = ".txt")
Sample_desc <- read.csv ("Sample_Description_tissue.csv")
############################################################################
### Pre-process files
#Groups
contexts <- c("CG","CHG","CHH")
samples <- c("Seedling","FL","Panicle","Stamen","FG1","FG6","Pistil_Nip",
"Pistil_rdr2_3","Pistil_rdr2_6","EC","CC", "Embryo", "Endosperm")
pal_sample <- c("#888888","#666666","#ae88c8","#6b89d7","#f17272","#a34c4c","#7d0000",
"#d1a897","#e4c2b3","#98b357","#7f9d3a","#c4e1b2","#a9d19b")
regions <- c("DMR_siren","DMR","Siren","Shuffle")
#Import data
rownames(Sample_desc) <- Sample_desc[,1]
data <- data.frame (matrix(ncol = 9, nrow = 0))
#Merge data
for (i in lst_file){
temp_data <- read.table(paste(direc,i,sep=""))
temp_data["V8"]  <- Sample_desc[i,"Sample"]
temp_data["V9"]  <- Sample_desc[i,"Region"]
data <- rbind(data, temp_data)
}
############################################################################
### Import libraries
library (ggplot2)
library (tidyverse)
library (dplyr)
library (FSA)
library (multcompView)
library (ggpubr)
############################################################################
### Import files
# Import all csv file in the directory
lst_file    <- list.files (path = "./tissue", pattern = ".txt")
Sample_desc <- read.csv ("Sample_Description_tissue.csv")
############################################################################
### Pre-process files
#Groups
contexts <- c("CG","CHG","CHH")
samples <- c("Seedling","FL","Panicle","Stamen","FG1","FG6","Pistil_Nip",
"Pistil_rdr2_3","Pistil_rdr2_6","EC","CC", "Embryo", "Endosperm")
pal_sample <- c("#888888","#666666","#ae88c8","#6b89d7","#f17272","#a34c4c","#7d0000",
"#d1a897","#e4c2b3","#98b357","#7f9d3a","#c4e1b2","#a9d19b")
regions <- c("DMR_siren","DMR","Siren","Shuffle")
#Import data
rownames(Sample_desc) <- Sample_desc[,1]
data <- data.frame (matrix(ncol = 9, nrow = 0))
#Merge data
for (i in lst_file){
temp_data <- read.table(paste("./tissue/",i,sep=""))
temp_data["V8"]  <- Sample_desc[i,"Sample"]
temp_data["V9"]  <- Sample_desc[i,"Region"]
data <- rbind(data, temp_data)
}
rm (temp_data)
colnames (data) <- c("chr","start","end","mC","C","mC_rate",
"Context","Sample","regionType")
data <- data %>%
filter(Sample != "FG1-2") %>%
mutate(Sample = case_when(Sample %in% c("FG1-1")         ~ "FG1",
Sample %in% c("FG2-1","FG2-2") ~ "FG2",
Sample %in% c("FG3-1","FG3-2") ~ "FG3",
Sample %in% c("FG4-1","FG4-2") ~ "FG4",
Sample %in% c("FG5-1","FG5-2") ~ "FG5",
Sample %in% c("FG6-1","FG6-2") ~ "FG6",
Sample %in% c("FL-1","FL-2")   ~ "FL",
Sample %in% c("Panicle-1","Panicle-2") ~ "Panicle",
Sample %in% c("Seedling-1","Seedling-2") ~ "Seedling",
Sample %in% c("Pistil") ~ "Pistil_Nip",
Sample %in% c("rdr2-3") ~ "Pistil_rdr2_3",
Sample %in% c("rdr2-6") ~ "Pistil_rdr2_6",
TRUE ~ Sample
)) %>%
filter(!Sample %in% c("FG2","FG3","FG4","FG5")) %>%
dplyr::select(chr,start,end, mC, C, Context, Sample, regionType) %>%
group_by(chr,start,end, Context, Sample, regionType) %>%
summarise(mC = sum(mC), C = sum(C)) %>%
mutate (mC_rate = mC/(mC+C)*100) %>%
dplyr::select(chr,start,end, mC, C, mC_rate, Context, Sample, regionType) %>%
mutate (mC_rate = ifelse(mC+C >= 20, mC_rate, NA)) %>% #20 reads minimum
ungroup()
data$Sample <- factor(data$Sample, levels = samples)
data$Context <- factor(data$Context, levels = contexts)
data$regionType <- factor(data$regionType, levels = regions)
#Getting regions having no reads mapped onto
data_NA <- data %>% filter(if_any(everything(), is.na))
data_NA_aggr <- data_NA %>%
group_by(Context, Sample, regionType) %>%
summarise(Count = n(), .groups = 'drop') %>%
complete(Context, Sample, regionType, fill = list(Count = 0))
p <- ggplot (data_NA_aggr, aes(x = Sample, y = Count, fill = regionType))+
facet_grid(rows = vars(Context))+
geom_bar (stat = "identity", position=position_dodge(width=0.9)) +
geom_text (aes(label = Count), position=position_dodge(width=0.9), size = 3) +
theme_classic()+
scale_fill_manual(values = pal_region)+
labs(title = "Regions having less than 20 reads mapped", x = "", y = "Count")
data$regionType <- factor(data$regionType, levels = regions)
#Filtering NA values
data <- na.omit(data)
############################################################################
### Kruskal-Wallis / Dunn's test - comparing samples
data_dunn <- data.frame (matrix(ncol = 6, nrow = 0))
data_dunn_letter <- data.frame (matrix(ncol = 4, nrow = 0))
data_kruskal <- data.frame (matrix(ncol = 7, nrow = 0))
for (context in contexts){
for (region in regions){
data_to_test <- data %>%
filter (Context == context, regionType == region) %>%
dplyr::select (Sample, mC_rate)
temp_kruskal <- kruskal.test (mC_rate ~ Sample, data = data_to_test)
temp_kruskal$Context = context
temp_kruskal$Region = region
data_kruskal <- rbind (data_kruskal, temp_kruskal)
if (temp_kruskal$p.value < 0.00001){
temp_dunn <- dunnTest (mC_rate ~ Sample, data = data_to_test, method = "bh")$res
temp_dunn$Context = context
temp_dunn$Region = region
temp_dunn <- temp_dunn[,c("Context","Region","Comparison","Z","P.unadj","P.adj")]
data_dunn <- rbind(data_dunn, temp_dunn)
dunn_p <- temp_dunn$P.adj
names(dunn_p) <- gsub(" ", "", temp_dunn$Comparison)
temp_dunn_letter <- data.frame(multcompLetters(dunn_p)["Letters"])
temp_dunn_letter$Sample <- rownames(temp_dunn_letter)
rownames(temp_dunn_letter) <- NULL
temp_dunn_letter$Context = context
temp_dunn_letter$Region = region
temp_dunn_letter <- temp_dunn_letter[,c("Context","Region","Sample","Letters")]
data_dunn_letter <- rbind(data_dunn_letter, temp_dunn_letter)
}
}
}
write.csv(data_kruskal, file = "Kruskal.csv")
write.csv(data_dunn, file = "Dunn_Individual.csv")
write.csv(data_dunn_letter, file = "Dunn_letter.csv")
p_CG_legend <- data %>%
filter(Context == "CG") %>%
ggplot (aes(x = regionType, y = mC_rate, fill = Sample))+
stat_boxplot(geom="errorbar")+
geom_boxplot(outlier.shape = NA)+
theme_classic()+
scale_fill_manual(values = pal_sample)+
labs(title = "CpG", x = "", y = "DNA methylation (%)")+
ylim (c(0,100))
p_CG <- p_CG_legend+
theme(legend.position = "none")
p_legend <- cowplot::get_legend(p_CG_legend)
p_CHG <- data %>%
filter(Context == "CHG") %>%
ggplot (aes(x = regionType, y = mC_rate, fill = Sample))+
stat_boxplot(geom="errorbar")+
geom_boxplot(outlier.shape = NA)+
theme_classic()+
scale_fill_manual(values = pal_sample)+
labs(title = "CHG",x = "", y = "DNA methylation (%)")+
ylim (c(0,100))+
theme(legend.position = "none")
p_CHH <- data %>%
filter(Context == "CHH") %>%
ggplot (aes(x = regionType, y = mC_rate, fill = Sample))+
stat_boxplot(geom="errorbar")+
geom_boxplot(outlier.shape = NA)+
theme_classic()+
scale_fill_manual(values = pal_sample)+
labs(title = "CHH",x = "", y = "DNA methylation (%)")+
ylim (c(0,100))+
theme(legend.position = "none")
p <- ggarrange(p_CG  , NULL,
p_CHG , p_legend,
p_CHH , NULL,
ncol = 2, nrow = 3,
widths = c(10, 2))
pdf(file = "./boxplot_tissue.pdf", width = 12, height = 6)
print(p)
dev.off()
############################################################################
### Import libraries
library (ggplot2)
library (tidyverse)
library (dplyr)
library (FSA)
library (multcompView)
library (ggpubr)
############################################################################
### Import files
# Import all csv file in the directory
lst_file    <- list.files (path = "./tissue", pattern = ".txt")
Sample_desc <- read.csv ("Sample_Description_tissue.csv")
############################################################################
### Pre-process files
#Groups
contexts <- c("CG","CHG","CHH")
samples <- c("Seedling","FL","Panicle","Stamen","FG1","FG6","Pistil_Nip",
"Pistil_rdr2_3","Pistil_rdr2_6","EC","CC", "Embryo", "Endosperm")
pal_sample <- c("#888888","#666666","#ae88c8","#6b89d7","#f17272","#a34c4c","#7d0000",
"#d1a897","#e4c2b3","#98b357","#7f9d3a","#c4e1b2","#a9d19b")
regions <- c("DMR_siren","DMR","Siren","Shuffle")
#Import data
rownames(Sample_desc) <- Sample_desc[,1]
data <- data.frame (matrix(ncol = 9, nrow = 0))
#Merge data
for (i in lst_file){
temp_data <- read.table(paste("./tissue/",i,sep=""))
temp_data["V8"]  <- Sample_desc[i,"Sample"]
temp_data["V9"]  <- Sample_desc[i,"Region"]
data <- rbind(data, temp_data)
}
rm (temp_data)
colnames (data) <- c("chr","start","end","mC","C","mC_rate",
"Context","Sample","regionType")
data <- data %>%
mutate(Sample = case_when(Sample %in% c("FG1-1")         ~ "FG1",
Sample %in% c("FG6-1","FG6-2") ~ "FG6",
Sample %in% c("FL-1","FL-2")   ~ "FL",
Sample %in% c("Panicle-1","Panicle-2") ~ "Panicle",
Sample %in% c("Seedling-1","Seedling-2") ~ "Seedling",
Sample %in% c("Pistil") ~ "Pistil_Nip",
Sample %in% c("rdr2-3") ~ "Pistil_rdr2_3",
Sample %in% c("rdr2-6") ~ "Pistil_rdr2_6",
TRUE ~ Sample
)) %>%
filter(!Sample %in% c("FG2","FG3","FG4","FG5")) %>%
dplyr::select(chr,start,end, mC, C, Context, Sample, regionType) %>%
group_by(chr,start,end, Context, Sample, regionType) %>%
summarise(mC = sum(mC), C = sum(C)) %>%
mutate (mC_rate = mC/(mC+C)*100) %>%
dplyr::select(chr,start,end, mC, C, mC_rate, Context, Sample, regionType) %>%
mutate (mC_rate = ifelse(mC+C >= 20, mC_rate, NA)) %>% #20 reads minimum
ungroup()
data$Sample <- factor(data$Sample, levels = samples)
data$Context <- factor(data$Context, levels = contexts)
data$regionType <- factor(data$regionType, levels = regions)
#Filtering NA values
data <- na.omit(data)
############################################################################
### Kruskal-Wallis / Dunn's test - comparing samples
data_dunn <- data.frame (matrix(ncol = 6, nrow = 0))
data_dunn_letter <- data.frame (matrix(ncol = 4, nrow = 0))
data_kruskal <- data.frame (matrix(ncol = 7, nrow = 0))
for (context in contexts){
for (region in regions){
data_to_test <- data %>%
filter (Context == context, regionType == region) %>%
dplyr::select (Sample, mC_rate)
temp_kruskal <- kruskal.test (mC_rate ~ Sample, data = data_to_test)
temp_kruskal$Context = context
temp_kruskal$Region = region
data_kruskal <- rbind (data_kruskal, temp_kruskal)
if (temp_kruskal$p.value < 0.00001){
temp_dunn <- dunnTest (mC_rate ~ Sample, data = data_to_test, method = "bh")$res
temp_dunn$Context = context
temp_dunn$Region = region
temp_dunn <- temp_dunn[,c("Context","Region","Comparison","Z","P.unadj","P.adj")]
data_dunn <- rbind(data_dunn, temp_dunn)
dunn_p <- temp_dunn$P.adj
names(dunn_p) <- gsub(" ", "", temp_dunn$Comparison)
temp_dunn_letter <- data.frame(multcompLetters(dunn_p)["Letters"])
temp_dunn_letter$Sample <- rownames(temp_dunn_letter)
rownames(temp_dunn_letter) <- NULL
temp_dunn_letter$Context = context
temp_dunn_letter$Region = region
temp_dunn_letter <- temp_dunn_letter[,c("Context","Region","Sample","Letters")]
data_dunn_letter <- rbind(data_dunn_letter, temp_dunn_letter)
}
}
}
write.csv(data_kruskal, file = "Kruskal.csv")
write.csv(data_dunn, file = "Dunn_Individual.csv")
write.csv(data_dunn_letter, file = "Dunn_letter.csv")
p_CG_legend <- data %>%
filter(Context == "CG") %>%
ggplot (aes(x = regionType, y = mC_rate, fill = Sample))+
stat_boxplot(geom="errorbar")+
geom_boxplot(outlier.shape = NA)+
theme_classic()+
scale_fill_manual(values = pal_sample)+
labs(title = "CpG", x = "", y = "DNA methylation (%)")+
ylim (c(0,100))
p_CG <- p_CG_legend+
theme(legend.position = "none")
p_legend <- cowplot::get_legend(p_CG_legend)
p_CHG <- data %>%
filter(Context == "CHG") %>%
ggplot (aes(x = regionType, y = mC_rate, fill = Sample))+
stat_boxplot(geom="errorbar")+
geom_boxplot(outlier.shape = NA)+
theme_classic()+
scale_fill_manual(values = pal_sample)+
labs(title = "CHG",x = "", y = "DNA methylation (%)")+
ylim (c(0,100))+
theme(legend.position = "none")
p_CHH <- data %>%
filter(Context == "CHH") %>%
ggplot (aes(x = regionType, y = mC_rate, fill = Sample))+
stat_boxplot(geom="errorbar")+
geom_boxplot(outlier.shape = NA)+
theme_classic()+
scale_fill_manual(values = pal_sample)+
labs(title = "CHH",x = "", y = "DNA methylation (%)")+
ylim (c(0,100))+
theme(legend.position = "none")
p <- ggarrange(p_CG  , NULL,
p_CHG , p_legend,
p_CHH , NULL,
ncol = 2, nrow = 3,
widths = c(10, 2))
pdf(file = "./boxplot_tissue.pdf", width = 12, height = 6)
print(p)
dev.off()
